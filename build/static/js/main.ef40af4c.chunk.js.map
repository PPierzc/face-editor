{"version":3,"sources":["components/Image.js","components/ModelProvider.js","components/SelectorCard.js","App.js","serviceWorker.js","index.js"],"names":["Image","document","createElement","prevPros","input","this","props","model","predictionData","predict","dataSync","max","reduce","res","cur","Infinity","min","arr","Uint8ClampedArray","pos","i","length","image","ImageData","refs","canvas","getContext","putImageData","react_default","a","style","border","width","height","boxShadow","ref","backgroundColor","React","Component","ModelProvider","_ref","children","_useState","useState","_useState2","Object","slicedToArray","setModel","useEffect","setter","console","log","tf","then","Children","map","child","cloneElement","objectSpread","invert","pca","dataset","inverse","Matrix","checkMatrix","mmul","U","transpose","center","scale","mulRowVector","stdevs","addRowVector","means","normComponents","mu","std","v","key","invNormComponents","SelectorCard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","PCA","encoded","X","getStandardDeviations","baseId","Math","random","toFixed","baseImage","imgPCA","data","components","invComponents","recon","state","_i","updateInput","bind","assertThisInitialized","updateI","randomizeImage","resetImage","_this$state","setState","_this$state2","_this2","event","value","_this3","_this$state3","_this4","sliderOptions","display","flexDirection","justifyContent","padding","alignItems","background","components_ModelProvider","components_Image","index_es","onClick","color","variant","marginTop","marginBottom","Array","fill","Fragment","marginRight","marginLeft","float","fontSize","maxWidth","Slider_default","onChange","onDragEnd","styles","footer","App","boxSizing","href","components_SelectorCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef40af4c.chunk.js","sourcesContent":["import React from 'react'\n\nclass Image extends React.Component {\n  componentDidMount () {\n    document.createElement('canvas')\n  }\n\n  componentDidUpdate (prevPros) {\n    if (prevPros.input !== this.props.input || prevPros.model !== this.props.model) {\n      if (this.props.model) {\n        const prediction = this.props.model.predict(this.props.input)\n        const predictionData = prediction.dataSync()\n        const max = predictionData.reduce((res, cur) => res < cur ? cur : res, -Infinity)\n        const min = predictionData.reduce((res, cur) => res > cur ? cur : res, Infinity)\n\n        const arr = new Uint8ClampedArray(256 * 256 * 4)\n        // Iterate through every pixel\n\n        let pos = 0\n        for (let i = 0; i < arr.length; i += 4) {\n          arr[i] = (predictionData[pos] - min) / max * 255 // R value\n          arr[i + 1] = (predictionData[pos + 1] - min) / max * 255 // G value\n          arr[i + 2] = (predictionData[pos + 2] - min) / max * 255 // B value\n          arr[i + 3] = 255 // A value\n          pos += 3\n        }\n\n        // Initialize a new ImageData object\n        const image = new ImageData(arr, 256, 256)\n\n        const context = this.refs.canvas.getContext('2d')\n        context.putImageData(image, 0, 0)\n      }\n    }\n  }\n\n  render () {\n    return (\n      <div style={{\n        border: '4px solid #fff',\n        width: 256,\n        height: 256,\n        boxShadow: '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)'\n      }}>\n        <canvas ref='canvas' width='256' height='256' style={{ backgroundColor: '#fff' }} />\n      </div>\n    )\n  }\n}\n\nexport default Image\n","import React, { useState, useEffect } from 'react'\nimport * as tf from '@tensorflow/tfjs'\n\nconst loadModel = (setter) => {\n  console.log('Model Loading')\n  tf.loadLayersModel('/decoder_v3/model.json')\n    .then(model => {\n      setter(model)\n      console.log('Model Loaded')\n    })\n}\n\nconst ModelProvider = ({ children }) => {\n  const [model, setModel] = useState()\n\n  useEffect(() => loadModel(setModel), [])\n\n  return (\n    <div>\n      {React.Children && React.Children.map(children, child => React.cloneElement(child, {\n        model: model,\n        ...child.props\n      }))\n      }\n    </div>\n  )\n}\n\nexport default ModelProvider\n","import React from 'react'\nimport * as tf from '@tensorflow/tfjs'\n\nimport { Card, CardContent, Typography, Button } from '@material-ui/core'\nimport Slider from '@material-ui/lab/Slider'\nimport { PCA } from 'ml-pca'\nimport { Matrix } from 'ml-matrix'\n\nimport Image from './Image'\nimport ModelProvider from './ModelProvider'\n\nimport encoded from '../encoded'\n\nconst invert = (pca, dataset) => {\n  dataset = Matrix.checkMatrix(dataset)\n\n  const inverse = dataset.mmul(pca.U.transpose())\n\n  if (pca.center) {\n    if (pca.scale) {\n      inverse.mulRowVector(pca.stdevs)\n    }\n    inverse.addRowVector(pca.means)\n  }\n\n  return inverse\n}\n\nconst normComponents = (mu, std) => (v, key) => {\n  const norm = (v - mu[key]) / (3 * std[key])\n  const trans = (norm + 1) * 50\n  return trans\n}\n\nconst invNormComponents = (mu, std) => (v, key) => {\n  const trans = v / 50 - 1\n  const norm = trans * (3 * std[key]) + mu[key]\n  return norm\n}\n\nclass SelectorCard extends React.Component {\n  constructor (props) {\n    super(props)\n\n    const pca = new PCA(encoded.X)\n    const std = pca.getStandardDeviations()\n\n    const baseId = (Math.random() * 1000).toFixed(0)\n\n    const baseImage = encoded.X[baseId]\n    const imgPCA = pca.predict([baseImage])\n    const mu = imgPCA.data[0]\n\n    const components = imgPCA.data[0].map(normComponents(mu, std))\n    const invComponents = components.map(invNormComponents(mu, std))\n\n    const recon = invert(pca, [invComponents]).data\n\n    this.state = {\n      input: components,\n      _i: tf.tensor([recon]),\n      pca,\n      mu,\n      std,\n      baseId\n    }\n\n    this.updateInput = this.updateInput.bind(this)\n    this.updateI = this.updateI.bind(this)\n    this.randomizeImage = this.randomizeImage.bind(this)\n    this.resetImage = this.resetImage.bind(this)\n  }\n\n  randomizeImage () {\n    const {\n      pca,\n      std\n    } = this.state\n\n    const baseId = (Math.random() * 4000).toFixed(0)\n    const baseImage = encoded.X[baseId]\n\n    const imgPCA = pca.predict([baseImage])\n    const mu = imgPCA.data[0]\n\n    const components = imgPCA.data[0].map(normComponents(mu, std))\n\n    this.setState({\n      input: components,\n      _i: tf.tensor([[baseImage]]),\n      baseId,\n      mu\n    })\n  }\n\n  resetImage () {\n    const {\n      pca,\n      mu,\n      std,\n      baseId\n    } = this.state\n\n    const baseImage = encoded.X[baseId]\n\n    const imgPCA = pca.predict([baseImage])\n\n    const components = imgPCA.data[0].map(normComponents(mu, std))\n\n    this.setState({\n      input: components,\n      _i: tf.tensor([[baseImage]]),\n      baseId\n    })\n  }\n\n  updateInput (input, key) {\n    return (event, value) => {\n      input[key] = value\n      this.setState({\n        input\n      })\n    }\n  }\n\n  updateI (input) {\n    const {\n      pca,\n      mu,\n      std\n    } = this.state\n\n    const invComponents = input.map(invNormComponents(mu, std))\n\n    const recon = invert(pca, [invComponents]).data\n    return () => {\n      this.setState({\n        _i: tf.tensor([recon])\n      })\n    }\n  }\n\n  render () {\n    const sliderOptions = [\n      'background color',\n      'shirt color',\n      'face color',\n      'vertical lighting',\n      'Redness',\n      'vertical lighting',\n      'background lighting',\n      'center lighting',\n      'face ilumination',\n      'face vibrance',\n      'hair shading',\n      'makeup',\n      'direction of looking',\n      'hair thickness',\n      'angular lighting',\n      'vertical lighting',\n      'horizontal lighting',\n      'horizontal lighting',\n      'face shading',\n      'eye shape',\n      'eye openness',\n      'eye shadow'\n    ]\n    return (\n      <div>\n        <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>\n          <div style={{\n            padding: 30,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background: 'linear-gradient(to right, rgba(255,111,0,1) 31%, rgba(255,147,42,1) 70%, rgba(255,175,75,1) 100%)'\n          }}>\n            <ModelProvider>\n              <Image input={this.state._i} />\n            </ModelProvider>\n            <Button\n              onClick={this.randomizeImage}\n              color={'secondary'}\n              variant={'contained'}\n              style={{ marginTop: 30 }}\n            >\n              Randomize\n            </Button>\n            <Button\n              onClick={this.resetImage}\n              color={'primary'}\n              variant={'contained'}\n              style={{ marginTop: 30 }}\n            >\n              Reset\n            </Button>\n          </div>\n          <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: 30,\n            marginBottom: 30\n          }}>\n            {Array(sliderOptions.length).fill(1).map((v, key) => (\n              <>\n                <div style={{ width: '100%' }}>\n                  <Typography variant={'button'} style={{\n                    marginRight: 10,\n                    marginLeft: 10,\n                    float: 'left',\n                    fontSize: 12,\n                    color: '#7e7e7e'\n                  }}>\n                    {sliderOptions[key]}\n                  </Typography>\n                </div>\n                <div style={{\n                  height: 50,\n                  width: '100%',\n                  maxWidth: 350,\n                  marginBottom: 20,\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center'\n                }}>\n                  <Typography style={{ marginRight: 10, marginLeft: 10 }}>Less</Typography>\n                  <Slider\n                    value={this.state.input[key]}\n                    style={{ width: '50%', maxWidth: 200 }}\n                    onChange={this.updateInput(this.state.input, key)}\n                    onDragEnd={this.updateI(this.state.input)}\n                  />\n                  <Typography style={{ marginRight: 10, marginLeft: 10 }}>More</Typography>\n                </div>\n              </>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectorCard\n","import React from 'react'\nimport './App.css'\nimport SelectorCard from './components/SelectorCard'\nimport { Typography, Button } from '@material-ui/core'\n\nconst styles = {\n  footer: {\n    width: '100%',\n    height: '80px',\n    background: 'linear-gradient(to right, rgba(255,111,0,1) 31%, rgba(255,147,42,1) 70%, rgba(255,175,75,1) 100%)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n}\n\nfunction App () {\n  return (\n    <>\n      <div style={{\n        width: '100%',\n        height: '40px',\n        padding: 10,\n        background: ' linear-gradient(to right, rgba(255,111,0,1) 31%, rgba(255,147,42,1) 70%, rgba(255,175,75,1) 100%)',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        boxSizing: 'border-box'\n      }}\n      >\n        <Typography variant='button' style={{ color: '#ffffff', fontSize: '18px' }}>Neural Face Editor</Typography>\n        <Button style={{ color: '#ffffff', fontSize: '15px' }} href={'https://github.com/PPierzc'}>Github</Button>\n      </div>\n      <div>\n        <SelectorCard />\n      </div>\n\n      <div style={styles.footer} />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}